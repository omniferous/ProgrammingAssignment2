set.seed(1)
rpois(5,2)
set.seed(1)
rpois(5,2)
?qpois
?rbinom
getwd()
setwd("E:/study/R programming/Week 3")
setwd("C:/Users/Russty/githome/assign2/ProgrammingAssignment2")
## Put comments here that give an overall description of what your
## functions do
## The function below provides a repository to store the inverse of a matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## The function below tests to see if a matrix has an existing inverse and if not
## calculates it. It then returns the inverse either calculated or from storage
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
test <- matrix(1,2,3,1)
test
?matrix
test <- matrix(c(1,2,3,1))
test
solve(test)
test <- matrix(c(1,2,3,1),nrow = 2)
solve(test)
cahceSolve(test)
cacheSolve(test)
makeCacheMatrix(test)
cacheSolve(test)
cacheSolve()
getwd()
## Put comments here that give an overall description of what your
## functions do
## The function below provides a repository to store the inverse of a matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## The function below tests to see if a matrix has an existing inverse and if not
## calculates it. It then returns the inverse either calculated or from storage
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
makeCacheMatrix()
cacheSolve(test)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector()
cachemean()
cachemean(c(3,4,5,4))
makeVector(c(3,4,5,4))
cachemean()
cachemean(c(3,4,5,4))
a <- makeCacheMatrix(test)
a$get
